//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/TouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInput"",
    ""maps"": [
        {
            ""name"": ""TouchPlayer"",
            ""id"": ""eb686502-74de-4718-b071-27fb79fbc5b0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ac8c6c58-60a0-40f4-a504-22d61014d234"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fc73335f-fa14-40c4-afb2-5a28ddb3f508"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a774f1d5-9ade-4000-8fa5-fb8d0c299de9"",
                    ""path"": ""<AndroidJoystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fc5b6ea5-a8a6-4fd8-8fb7-1c77c6a19dda"",
                    ""path"": ""<AndroidJoystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchPlayer
        m_TouchPlayer = asset.FindActionMap("TouchPlayer", throwIfNotFound: true);
        m_TouchPlayer_Move = m_TouchPlayer.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchPlayer
    private readonly InputActionMap m_TouchPlayer;
    private ITouchPlayerActions m_TouchPlayerActionsCallbackInterface;
    private readonly InputAction m_TouchPlayer_Move;
    public struct TouchPlayerActions
    {
        private @TouchInput m_Wrapper;
        public TouchPlayerActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TouchPlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_TouchPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchPlayerActions set) { return set.Get(); }
        public void SetCallbacks(ITouchPlayerActions instance)
        {
            if (m_Wrapper.m_TouchPlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TouchPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TouchPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TouchPlayerActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_TouchPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public TouchPlayerActions @TouchPlayer => new TouchPlayerActions(this);
    public interface ITouchPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
